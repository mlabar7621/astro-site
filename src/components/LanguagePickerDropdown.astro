---
import { getAlternateLanguageLinks, getCurrentLanguageData } from '@i18n/utils';

const currentLocale  = Astro.currentLocale || Astro.params.locale || 'en';
const currentPath = Astro.url.pathname;

const links = getAlternateLanguageLinks(currentLocale, currentPath);
const currentLinks = getCurrentLanguageData(currentLocale);
---

<div class="dropdown">
  <div class="dropdown-button">
    <img src={currentLinks.img} />
    {currentLinks.name}
  </div>
  <div class="dropdown-content">
  {
    links.map(({ locale, name, img, url }) => (
      <div>
        <a href={url} lang={locale}>
          <img src={img} />
          {name}
        </a>
      </div>
    ))
  }
  </div>
</div>

<style>
  .dropdown {
    cursor: pointer;
    user-select: none;
    position: relative;
  }
  @media (hover:hover) and (pointer:fine) {
    .dropdown:hover .dropdown-content{
      display: block;
      transform: translateY(0);
      opacity: 100%;
      pointer-events: auto;
    }
  }
  .dropdown.open .dropdown-content{
    display: block;
    transform: translateY(0);
    opacity: 100%;
    pointer-events: auto;
  }
  .dropdown-button {
    display: block;
    padding: 8px;
  }
  .dropdown-content {
    position: absolute;
    opacity: 0%;
    background-color: white;
    border-radius: 8px;
    left: -8px;
    min-width: 125%;
    text-align: center;
    padding-bottom: 4px;
    transform: translateY(-8px);
    transition: all 0.2s ease-in-out;
    box-shadow: 0 2px 8px rgba(var(--black),2%);
    pointer-events: none;
    div {
      display: inline-flex;
      white-space: nowrap;
      margin-top: -1px;
    }
  }
  a {
    color: var(--gray-dark);
    text-decoration: none;
    border-top: 1px solid black;
    padding: 6px 0;
  }
  a:hover {
    color:var(--accent);
    transition: all 0.2s ease-in-out;
  }
  img {
    height: 0.8rem;
  }
</style>